import asyncio
import os.path
import sys

from config_data.logger_config import *
from aiogram import Router, F, Bot

from aiogram.filters import Command

from tg_api.states.user_state import MovieSearch
from tg_api.handlers.custom_handlers.common_func import *
from tg_api.keyboards.inline.some_inline_kb import change_films_kb
from tg_api.keyboards.inline.for_film_param import *

from site_api.core import def_find_film_param

from database.utilits.common_func import create_list_for_find_film
from database.models.models import User, Find_Film_Param, db
from database.core import def_insert_data, def_get_elem

import re

logger = logging.getLogger(f'main.tg_api.handlers.custom_handlers.{os.path.basename(__file__)}')
sys.excepthook = any_exception

router = Router()
genres = ['–±–æ–µ–≤–∏–∫', '–∫–æ–º–µ–¥–∏—è', '–º—É–ª—å—Ç—Ñ–∏–ª—å–º', '–º–µ–ª–æ–¥—Ä–∞–º–∞', '—Å–µ–º–µ–π–Ω—ã–π', '–∞–Ω–∏–º–µ',
          '–±–∏–æ–≥—Ä–∞—Ñ–∏—è', '–≤–µ—Å—Ç–µ—Ä–Ω', '–≤–æ–µ–Ω–Ω—ã–π', '–¥–µ—Ç–µ–∫—Ç–∏–≤', '–¥–µ—Ç—Å–∫–∏–π', '–¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö',
          '–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π', '–¥—Ä–∞–º–∞', '–∏–≥—Ä–∞', '–∏—Å—Ç–æ—Ä–∏—è', '–∫–æ–Ω—Ü–µ—Ä—Ç', '–∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞', '–∫—Ä–∏–º–∏–Ω–∞–ª',
          '–º—É–∑—ã–∫–∞', '–º—é–∑–∏–∫–ª', '–Ω–æ–≤–æ—Å—Ç–∏', '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', '—Ä–µ–∞–ª—å–Ω–æ–µ –¢–í',
          '—Å–ø–æ—Ä—Ç', '—Ç–æ–∫-—à–æ—É', '—Ç—Ä–∏–ª–ª–µ—Ä', '—É–∂–∞—Å—ã', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', ' —Ñ–∏–ª—å–º-–Ω—É–∞—Ä', '—Ü–µ—Ä–µ–º–æ–Ω–∏—è', '—Ñ—ç–Ω—Ç–µ–∑–∏']
countries = [el for el in countries_list()]


@router.message(F.text == '–ü–æ–¥–±–æ—Ä üé• –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')
@router.message(Command('find_param'))
async def finder_film(message: Message, state: FSMContext):
    """–î–µ–π—Å—Ç–≤–∏–µ –ø–æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')
    await message.answer('ü§ñ –°–µ–π—á–∞—Å –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤!', reply_markup=ReplyKeyboardRemove())
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?', reply_markup=film_type_kb())
    await state.set_state(MovieSearch.find_film_param)


@router.callback_query(MovieSearch.find_film_param, F.data.startswith('type'))
async def film_types(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∏–ª—å–º–æ–≤"""
    logger.debug(f'{film_types.__name__} - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏')
    user_value = callback.from_user.id
    action = callback.data.split('_')[1]
    if action == 'None':
        action = None
    user_data[user_value] = [action, 2019, 2024, 0, 10, 0]
    await callback.answer(f'{callback.from_user.username} –≤—ã–±—Ä–∞–ª {action}')
    logger.debug(f'{user_value},{user_data}]')
    await bot.send_message(chat_id=callback.message.chat.id, text='–°–ø–∞—Å–∏–±–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É')
    await asyncio.sleep(1)
    await bot.send_message(chat_id=callback.message.chat.id, text='–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –≥–æ–¥\n –æ—Ç 2019 –¥–æ 2024',
                           reply_markup=year_change_kb())
    await state.set_state(MovieSearch.choosing_year)
    logger.debug(f'{film_types.__name__} - –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏')


@router.message(MovieSearch.find_film_param, F.text)
async def incorrect_type(message: Message):
    """–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–∏–ø—É —Ñ–∏–ª—å–º–æ–≤"""
    await message.answer('–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=film_type_kb())


async def edit_message_year(message: Message, value_l: int, value_r: int):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤–≤–æ–¥—É –¥–∞—Ç"""
    await message.edit_text(f'–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –≥–æ–¥\n –æ—Ç {value_l} –¥–æ {value_r}', reply_markup=year_change_kb())


async def edit_message_rating(message: Message, value_l: int, value_r: int):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤–≤–æ–¥—É —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    await message.edit_text(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥?\n {value_l} - {value_r}', reply_markup=rating_change_kb())


async def edit_message_genres(message: Message, value: int):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤–≤–æ–¥—É –∂–∞–Ω—Ä–∞"""
    await message.edit_text(f'–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –∂–∞–Ω—Ä?\n'
                            f'<b>{genres[value]}</b>', reply_markup=genres_change_kb())


@router.message(MovieSearch.choosing_year, F.text)
async def manual_year(message: Message, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞—Ç—ã –≤—ã—Ö–æ–¥–∞ —Ñ–∏–ª—å–º–æ–≤"""
    user_value = message.from_user.id
    res = re.findall(r'\d{4}', message.text)
    logger.debug(f'{manual_year.__name__} - {res}')
    if len(res):
        if len(res) > 1 and int(res[0]) <= int(res[1]) <= 2024:
            user_data[message.from_user.id][1] = '-'.join(res[0:2])
        elif len(res) == 1 and int(res[0]) <= 2024:
            user_data[message.from_user.id][1] = '-'.join(res[0:1])
        else:
            await message.answer('–ì–æ–¥—ã —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ!\n –ù—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 1874, 2050, !2020, 2020-2024')
            await message.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –≥–æ–¥\n –æ—Ç 2019 –¥–æ 2024', reply_markup=year_change_kb())
            return
        del (user_data[message.from_user.id][2])
        logger.debug(f'{manual_year.__name__} - {user_data}')
        await message.answer(f"–ò—Ç–æ–≥–æ: {user_data[user_value][1]}")
        await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥?\n 0 - 10', reply_markup=rating_change_kb())
        await state.set_state(MovieSearch.choosing_rating)
    else:
        await message.reply('–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫–∏', reply_markup=year_change_kb())


@router.callback_query(MovieSearch.choosing_year, F.data.startswith('year'))
async def year(callback: CallbackQuery, state: FSMContext):
    """–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ —Ñ–∏–ª—å–º–æ–≤"""
    user_value = callback.from_user.id
    action = callback.data.split('_')[1]
    logger.debug(f'{year.__name__} - {action}')
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–π –∏—Ç–µ—Ä—Ä–∞—Ü–∏–∏
    value_l = user_data[user_value][1]
    value_r = user_data[user_value][2]
    if action == 'lplus':
        user_data[user_value][1] += 1
    elif action == 'lminus':
        user_data[user_value][1] -= 1
    elif action == 'rplus':
        user_data[user_value][2] += 1
    elif action == 'rminus':
        user_data[user_value][2] -= 1
    elif action == 'None':
        user_data[user_value][1] = None
        del (user_data[user_value][2])
        logger.debug(f'{year.__name__} - {user_data}')
        await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: –í—Å–µ —Ä–∞–≤–Ω–æ")
        await callback.message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥?\n 0 - 10', reply_markup=rating_change_kb())
        await state.set_state(MovieSearch.choosing_rating)
        return
    elif action == 'finish':
        user_data[user_value][1] = '-'.join([str(user_data[user_value][1]), str(user_data[user_value][2])])
        del (user_data[user_value][2])
        logger.debug(f'{year.__name__} - {user_data}')
        await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_data[user_value][1]}")
        await callback.message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥?\n 0 - 10', reply_markup=rating_change_kb())
        await state.set_state(MovieSearch.choosing_rating)
        return
    if user_data[user_value][1] <= user_data[user_value][2] < 2025 and user_data[user_value][2] < 2025:
        await edit_message_year(callback.message, user_data[user_value][1], user_data[user_value][2])
    else:
        user_data[user_value][1] = value_l
        user_data[user_value][2] = value_r
        await callback.answer('–ù–µ-–∞')
    logger.debug(f'{year.__name__} - {user_data}')


@router.message(MovieSearch.choosing_rating, F.text)
async def incorrect_rating(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    await message.answer('–õ—É—á—à–µ –≤—ã–±–∏—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏', reply_markup=rating_change_kb())


@router.callback_query(MovieSearch.choosing_rating, F.data.startswith('rating'))
async def rating_change(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–∏—Ä–∞—é —Ä–µ–π—Ç–∏–Ω–≥–∏"""
    user_value = callback.from_user.id
    action = callback.data.split('_')[1]
    logger.debug(f'{rating_change.__name__} - {action}')
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–π –∏—Ç–µ—Ä—Ä–∞—Ü–∏–∏
    value_l = user_data[user_value][2]
    value_r = user_data[user_value][3]
    if action == 'lplus':
        user_data[user_value][2] += 1
    elif action == 'lminus':
        user_data[user_value][2] -= 1
    elif action == 'rplus':
        user_data[user_value][3] += 1
    elif action == 'rminus':
        user_data[user_value][3] -= 1
    elif action == 'None':
        user_data[user_value][2] = None
        del (user_data[user_value][3])
        logger.debug(f'{rating_change.__name__} - {user_data}')
        await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: –í—Å–µ —Ä–∞–≤–Ω–æ")
        await callback.message.answer(text=f'–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –∂–∞–Ω—Ä?\n{genres[user_data[user_value][3]]}',
                                      reply_markup=genres_change_kb())
        await state.set_state(MovieSearch.choosing_genres)
        return
    elif action == 'finish':
        user_data[user_value][2] = '-'.join([str(user_data[user_value][2]), str(user_data[user_value][3])])
        del (user_data[user_value][3])
        logger.debug(f'{rating_change.__name__} - {user_data}')
        await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_data[user_value][2]}")
        await callback.message.answer(text=f'–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –∂–∞–Ω—Ä?\n{genres[user_data[user_value][3]]}',
                                      reply_markup=genres_change_kb())
        await state.set_state(MovieSearch.choosing_genres)
        return
    if 0 <= user_data[user_value][2] <= user_data[user_value][3] < 11 and user_data[user_value][3] < 11:
        await edit_message_rating(callback.message, user_data[user_value][2], user_data[user_value][3])
    else:
        user_data[user_value][2] = value_l
        user_data[user_value][3] = value_r
        await callback.answer('–ù–µ-–∞')
    logger.debug(f'{rating_change.__name__} - {user_data}')


@router.message(MovieSearch.choosing_genres, F.text)
async def incorrect_genres(message: Message):
    """–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∂–∞–Ω—Ä–∞"""
    await message.answer('–õ—É—á—à–µ –≤—ã–±–∏—Ä–∞—Ç—å –∂–∞–Ω—Ä –∫–Ω–æ–ø–∫–∞–º–∏', reply_markup=genres_change_kb())


@router.callback_query(MovieSearch.choosing_genres, F.data.startswith('genres'))
async def genres_change(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–∏—Ä–∞—é –∂–∞–Ω—Ä—ã"""
    user_value = callback.from_user.id
    action = callback.data.split('_')[1]
    logger.debug(f'{genres_change.__name__} - {action}')
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–π –∏—Ç–µ—Ä—Ä–∞—Ü–∏–∏
    value = user_data[user_value][3]
    if action == 'left':
        user_data[user_value][3] -= 1
    elif action == 'right':
        user_data[user_value][3] += 1
    elif action == 'None':
        user_data[user_value][3] = None
        logger.debug(f'{genres_change.__name__} - {user_data}')
        await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: –í—Å–µ —Ä–∞–≤–Ω–æ")
        await callback.message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã?')
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã', reply_markup=countries_kb())
        await state.set_state(MovieSearch.choosing_country)
        return
    elif action == 'finish':
        user_data[user_value][3] = genres[user_data[user_value][3]]
        logger.debug(f'{genres_change.__name__} - {user_data}')
        await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_data[user_value][3]}")
        await callback.message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã?')
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã', reply_markup=countries_kb())
        await state.set_state(MovieSearch.choosing_country)
        return
    if -1 < user_data[user_value][3] <= len(genres):
        await edit_message_genres(callback.message, user_data[user_value][3])
    else:
        user_data[user_value][3] = value
        await callback.answer('–ù–µ-–∞')
    logger.debug(f'{genres_change.__name__} - {user_data}')


@router.callback_query(MovieSearch.choosing_country, F.data.startswith('countries'))
async def countries_choice_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–ë—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–º –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ None"""
    print(callback.data)
    user_inf = callback.from_user.id
    action = callback.data.split('_')[1]
    user_data[user_inf].append(None)
    logger.debug(f'{countries_choice_callback.__name__} - {user_data}')
    def_del_old_elem(db, user_inf, Find_Film_Param, User)
    await bot.send_message(chat_id=callback.message.chat.id, text='–í–æ—Ç –≤—Å–µ –≤—ã–±—Ä–∞–ª–∏!')
    await bot.send_message(chat_id=callback.message.chat.id, text='–¢–∏–ø = {0}\n'
                                                                  '–ì–æ–¥ = {1}\n'
                                                                  '–†–µ–π—Ç–∏–Ω–≥ = {2}\n'
                                                                  '–ñ–∞–Ω—Ä = {3}\n'
                                                                  '–°—Ç—Ä–∞–Ω–∞= {4}\n'
                           .format(*[el if el is not None else '–í—Å–µ —Ä–∞–≤–Ω–æ' for el in user_data[user_inf]]))
    try:
        response_list = def_find_film_param(*user_data[user_inf])
        if isinstance(response_list, list) and len(response_list):
            out_list = create_list_for_find_film(User.get(User.user_id == user_inf), response_list,
                                                 ','.join(
                                                     [el if el is not None else '–í—Å–µ —Ä–∞–≤–Ω–æ'
                                                      for el in user_data[user_inf]]))
            def_insert_data(db, Find_Film_Param, out_list)
            if user_inf in dict_with_films:
                del dict_with_films[user_inf]
            if user_inf in user_data:
                del user_data[user_inf]

            dict_with_films[user_inf] = def_get_elem(db, user_inf, Find_Film_Param, User)
            await bot.send_photo(chat_id=callback.message.chat.id,
                                 photo=photo_finder(num=0, user_id=user_inf, out_message_dict=dict_with_films),
                                 caption=caption(num=0, user_id=user_inf, out_message_dict=dict_with_films),
                                 reply_markup=change_films_kb(num=0, all_num=len(dict_with_films[user_inf])))
            await state.set_state(MovieSearch.changing_films_find_film_param)
        elif isinstance(response_list, list):
            await bot.send_message(callback.message.chat.id, text='–ê —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π —Ñ–∏–ª—å–º ü§ñ')
        else:
            logger.debug(f'{countries_choice_callback.__name__} - {response_list}')
            await bot.send_message(callback.message.chat.id, text='–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ! –ë—É–¥—É —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è',
                                   reply_markup=ReplyKeyboardRemove())
            await bot.send_sticker(callback.message.chat.id,
                                   sticker='CAACAgIAAxkBAAELUIxlv4FmGKw0Z7rVlCfWSo1gTA_n1wACWQADJxRJC-OPDSX1raG1NAQ')
            await state.clear()
    except ReadTimeout as exs:
        logger.exception('—Å–∞–π—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç', exc_info=True)
        await bot.send_message(callback.message.chat.id, text='–£–ø—Å—Å—Å—Å...–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç',
                               reply_markup=ReplyKeyboardRemove())
        await bot.send_message(callback.message.chat.id,
                               text='CAACAgIAAxkBAAELUIxlv4FmGKw0Z7rVlCfWSo1gTA_n1wACWQADJxRJC-OPDSX1raG1NAQ')
    await state.set_state(MovieSearch.changing_films_find_film_param)


@router.message(MovieSearch.choosing_country, F.text.title().in_(countries))
async def countries_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã"""
    user_value = message.from_user.id
    if message.text.upper() in ['–°–®–ê', '–°–°–°–†', '–¶–ê–†', '–û–ê–≠']:
        user_data[user_value].append(message.text.upper())
    else:
        user_data[user_value].append(message.text.title())
    await message.answer('–í–æ—Ç –≤—Å–µ –∏ –≤—ã–±—Ä–∞–ª–∏!')
    await message.answer(text='–¢–∏–ø = {0}\n'
                              '–ì–æ–¥ = {1}\n'
                              '–†–µ–π—Ç–∏–Ω–≥ = {2}\n'
                              '–ñ–∞–Ω—Ä = {3}\n'
                              '–°—Ç—Ä–∞–Ω–∞= {4}\n'.format(*[el if el is not None else '–í—Å–µ —Ä–∞–≤–Ω–æ'
                                                       for el in user_data[user_value]]))
    logger.debug(f'{countries_choice.__name__} - {user_data}')
    await state.set_state(MovieSearch.choosing_find_film_param)
    await rez_finder(message, state, MovieSearch.changing_films_find_film_param, Find_Film_Param)


@router.message(MovieSearch.choosing_country, F.text)
async def incorrect_country(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã"""
    await message.answer('–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ—Ç—É!', reply_markup=countries_kb())


@router.callback_query(MovieSearch.changing_films_find_film_param, F.data.startswith("num_"))
async def callbacks_films(callback: CallbackQuery, state: FSMContext):
    await callbacks_num(callback, state, MovieSearch.changing_films_find_film_param)
